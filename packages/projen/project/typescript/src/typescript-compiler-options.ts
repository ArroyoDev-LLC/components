// ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import type { javascript } from 'projen';

/**
 * TypeScriptCompilerOptions
 */
export interface TypeScriptCompilerOptions {
  /**
   * Types to include in compilation.
   */
  readonly types?: Array<string>;
  /**
   * Simplifies TypeScript's handling of import/export `type` modifiers.
   * @default undefined
   * @stability experimental
   */
  readonly verbatimModuleSyntax?: boolean;
  /**
   * Modern browsers support all ES6 features, so ES6 is a good choice.
   * You might choose to set
   * a lower target if your code is deployed to older environments, or a higher target if your
   * code is guaranteed to run in newer environments.
   * @default "ES2018"
   * @stability experimental
   */
  readonly target?: string;
  /**
   * Do not emit declarations for code that has an `@internal` annotation in it’s JSDoc comment.
   * @default true
   * @stability experimental
   */
  readonly stripInternal?: boolean;
  /**
   * When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.
   * @default true
   * @stability experimental
   */
  readonly strictPropertyInitialization?: boolean;
  /**
   * When strictNullChecks is false, null and undefined are effectively ignored by the language.
   * This can lead to unexpected errors at runtime.
   * When strictNullChecks is true, null and undefined have their own distinct types and you’ll
   * get a type error if you try to use them where a concrete value is expected.
   * @default true
   * @stability experimental
   */
  readonly strictNullChecks?: boolean;
  /**
   * The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.
   * Turning this on is equivalent to enabling all of the strict mode family
   * options, which are outlined below. You can then turn off individual strict mode family checks as
   * needed.
   * @default true
   * @stability experimental
   */
  readonly strict?: boolean;
  /**
   * Specify the location where a debugger should locate TypeScript files instead of relative source locations.
   * @default undefined
   * @stability experimental
   */
  readonly sourceRoot?: string;
  /**
   * Enables the generation of sourcemap files.
   * @default undefined
   * @stability experimental
   */
  readonly sourceMap?: boolean;
  /**
   * Skip type checking of all declaration files (*.d.ts).
   * @default false
   * @stability experimental
   */
  readonly skipLibCheck?: boolean;
  /**
   * Specifies the root directory of input files.
   * Only use to control the output directory structure with `outDir`.
   * @stability experimental
   */
  readonly rootDir?: string;
  /**
   * Forces TypeScript to consult the `imports` field of `package.json` when performing a lookup that begins with `#` from a file that has a `package.json` as an ancestor.
   * @default undefined
   * @stability experimental
   */
  readonly resolvePackageJsonImports?: boolean;
  /**
   * Forces TypeScript to consult the `exports` field of `package.json` files if it ever reads from a package in `node_modules`.
   * @default true
   * @stability experimental
   */
  readonly resolvePackageJsonExports?: boolean;
  /**
   * Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape.
   * @default true
   * @stability experimental
   */
  readonly resolveJsonModule?: boolean;
  /**
   * A series of entries which re-map imports to lookup locations relative to the baseUrl, there is a larger coverage of paths in the handbook.
   * paths lets you declare how TypeScript should resolve an import in your require/imports.
   * @stability experimental
   */
  readonly paths?: Record<string, Array<string>>;
  /**
   * Output directory for the compiled files.
   * @stability experimental
   */
  readonly outDir?: string;
  /**
   * Report errors on unused parameters in functions.
   * @default true
   * @stability experimental
   */
  readonly noUnusedParameters?: boolean;
  /**
   * Report errors on unused local variables.
   * @default true
   * @stability experimental
   */
  readonly noUnusedLocals?: boolean;
  /**
   * Raise error when accessing indexes on objects with unknown keys defined in index signatures.
   * @default true
   * @stability experimental
   */
  readonly noUncheckedIndexedAccess?: boolean;
  /**
   * Raise error on use of the dot syntax to access fields which are not defined.
   * @default true
   * @stability experimental
   */
  readonly noPropertyAccessFromIndexSignature?: boolean;
  /**
   * Raise error on ‘this’ expressions with an implied ‘any’ type.
   * @default true
   * @stability experimental
   */
  readonly noImplicitThis?: boolean;
  /**
   * When enabled, TypeScript will check all code paths in a function to ensure they return a value.
   * @default true
   * @stability experimental
   */
  readonly noImplicitReturns?: boolean;
  /**
   * Using `noImplicitOverride`, you can ensure that sub-classes never go out of sync as they are required to explicitly declare that they are overriding a member using the `override` keyword.
   * This also improves readability of the programmer's intent.
   *
   * Available with TypeScript 4.3 and newer.
   * @default false
   * @stability experimental
   */
  readonly noImplicitOverride?: boolean;
  /**
   * In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.
   * @default true
   * @stability experimental
   */
  readonly noImplicitAny?: boolean;
  /**
   * Report errors for fallthrough cases in switch statements.
   * Ensures that any non-empty
   * case inside a switch statement includes either break or return. This means you won’t
   * accidentally ship a case fallthrough bug.
   * @default true
   * @stability experimental
   */
  readonly noFallthroughCasesInSwitch?: boolean;
  /**
   * Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.
   * @default true
   * @stability experimental
   */
  readonly noEmitOnError?: boolean;
  /**
   * Do not emit outputs.
   * @default false
   * @stability experimental
   */
  readonly noEmit?: boolean;
  /**
   * Determine how modules get resolved.
   * Either "Node" for Node.js/io.js style resolution, or "Classic".
   * @default "node"
   * @stability experimental
   */
  readonly moduleResolution?: javascript.TypeScriptModuleResolution;
  /**
   * Sets the module system for the program.
   * See https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules.
   * @default "CommonJS"
   * @stability experimental
   */
  readonly module?: string;
  /**
   * Reference for type definitions / libraries to use (eg.
   * ES2016, ES5, ES2018).
   * @default [ "es2018" ]
   * @stability experimental
   */
  readonly lib?: Array<string>;
  /**
   * Declares the module specifier to be used for importing the jsx and jsxs factory functions when using jsx.
   * @default undefined
   * @stability experimental
   */
  readonly jsxImportSource?: string;
  /**
   * Support JSX in .tsx files: "react", "preserve", "react-native" etc.
   * @default undefined
   * @stability experimental
   */
  readonly jsx?: javascript.TypeScriptJsxMode;
  /**
   * Perform additional checks to ensure that separate compilation (such as with transpileModule or.
   * @default false
   * @stability experimental
   * @babel /plugin-transform-typescript) would be safe.
   */
  readonly isolatedModules?: boolean;
  /**
   * When set, TypeScript will include the original content of the .ts file as an embedded string in the source map. This is often useful in the same cases as inlineSourceMap.
   * @default true
   * @stability experimental
   */
  readonly inlineSources?: boolean;
  /**
   * When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files.
   * @default true
   * @stability experimental
   */
  readonly inlineSourceMap?: boolean;
  /**
   * This flag works because you can use `import type` to explicitly create an `import` statement which should never be emitted into JavaScript.
   * @default "remove"
   * @stability experimental
   * @remarks For TypeScript 5.0+ use `verbatimModuleSyntax` instead.
Posed for deprecation upon TypeScript 5.5.
   */
  readonly importsNotUsedAsValues?: javascript.TypeScriptImportsNotUsedAsValues;
  /**
   * Disallow inconsistently-cased references to the same file.
   * @default false
   * @stability experimental
   */
  readonly forceConsistentCasingInFileNames?: boolean;
  /**
   * Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.
   * @default true
   * @stability experimental
   */
  readonly experimentalDecorators?: boolean;
  /**
   * Emit __importStar and __importDefault helpers for runtime babel ecosystem compatibility and enable --allowSyntheticDefaultImports for typesystem compatibility.
   * @default false
   * @stability experimental
   */
  readonly esModuleInterop?: boolean;
  /**
   * Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.
   * Decorators are a language feature which hasn’t yet been fully ratified into the JavaScript specification.
   * This means that the implementation version in TypeScript may differ from the implementation in JavaScript when it it decided by TC39.
   * You can find out more about decorator support in TypeScript in the handbook.
   * @default undefined
   * @stability experimental
   */
  readonly emitDecoratorMetadata?: boolean;
  /**
   * Only emit .d.ts files; do not emit .js files.
   * @default false
   * @stability experimental
   */
  readonly emitDeclarationOnly?: boolean;
  /**
   * Offers a way to configure the root directory for where declaration files are emitted.
   * @stability experimental
   */
  readonly declarationDir?: string;
  /**
   * To be specified along with the above.
   * @stability experimental
   */
  readonly declaration?: boolean;
  /**
   * List of additional conditions that should succeed when TypeScript resolves from an `exports` or `imports` field of a `package.json`.
   * @default undefined
   * @stability experimental
   */
  readonly customConditions?: Array<string>;
  /**
   * Lets you set a base directory to resolve non-absolute module names.
   * You can define a root folder where you can do absolute file resolution.
   * @stability experimental
   */
  readonly baseUrl?: string;
  /**
   * Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
   * @default true
   * @stability experimental
   */
  readonly alwaysStrict?: boolean;
  /**
   * Allow default imports from modules with no default export.
   * This does not affect code emit, just typechecking.
   * @stability experimental
   */
  readonly allowSyntheticDefaultImports?: boolean;
  /**
   * Allow JavaScript files to be compiled.
   * @default false
   * @stability experimental
   */
  readonly allowJs?: boolean;
  /**
   * Allows TypeScript files to import each other with TypeScript-specific extensions (`.ts`, `.mts`, `.tsx`). Requires `noEmit` or `emitDeclarationOnly`.
   * @default undefined
   * @stability experimental
   */
  readonly allowImportingTsExtensions?: boolean;
  /**
   * Suppress arbitrary extension import errors with the assumption that a bundler will be handling it.
   * @default undefined
   * @stability experimental
   */
  readonly allowArbitraryExtensions?: boolean;
}
