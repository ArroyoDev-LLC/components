import fs from 'node:fs/promises'
import os from 'node:os'
import path from 'node:path'
import { isComponent } from '@arroyodev-llc/utils.projen'
import { awscdk, DependencyType, Testing, typescript } from 'projen'
import { afterEach, beforeEach, describe, expect, test } from 'vitest'
import { AwsCdkTsEsmLambda, AwsCdkTsEsmLambdaAutoDiscover } from '../src'

interface TestContext {
	outdir: string
	project: typescript.TypeScriptProject
	lambdaFunction: awscdk.LambdaFunction
}

describe('AwsCdkTsEsmLambda', () => {
	beforeEach<TestContext>(async (ctx) => {
		const outdir = path.join(os.tmpdir(), ctx.task.id)
		ctx.outdir = outdir
		ctx.project = new typescript.TypeScriptProject({
			name: ctx.task.id,
			outdir,
			defaultReleaseBranch: 'main',
		})
		ctx.lambdaFunction = new awscdk.LambdaFunction(ctx.project, {
			entrypoint: path.join('src', 'test.lambda.ts'),
			cdkDeps: new awscdk.AwsCdkDepsJs(ctx.project, {
				cdkVersion: '2.162.1',
				dependencyType: DependencyType.RUNTIME,
			}),
		})
	})

	afterEach<TestContext>(async (ctx) => {
		try {
			await fs.rmdir(ctx.outdir, { force: true })
		} catch (e) {
			console.warn(e)
		}
	})

	test<TestContext>('renders as expected', (ctx) => {
		const file = ctx.project.tryFindFile('src/test-function.ts')
		new AwsCdkTsEsmLambda(ctx.project, {
			filePath: file.path,
		})
		const synth = Testing.synth(ctx.project)
		expect(synth['src/test-function.ts']).toBeDefined()
		expect(synth['src/test-function.ts']).toMatchInlineSnapshot(`
			"
			// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
			import * as lambda from 'aws-cdk-lib/aws-lambda';
			import { Construct } from 'constructs';
			import { fileURLToPath } from \\"node:url\\";
			import * as path from 'path';

			/**
			 * Props for TestFunction
			 */
			export interface TestFunctionProps extends lambda.FunctionOptions {
			}

			/**
			 * An AWS Lambda function which executes src/test.
			 */
			export class TestFunction extends lambda.Function {
			    constructor(scope: Construct, id: string, props?: TestFunctionProps) {
			        const __filename = fileURLToPath(import.meta.url);
			        const __dirname = path.dirname(__filename);
			        super(scope, id, {
			            description: 'src/test.lambda.ts',
			            ...props,
			            runtime: new lambda.Runtime('nodejs18.x', lambda.RuntimeFamily.NODEJS),
			            handler: 'index.handler',
			            code: lambda.Code.fromAsset(path.join(__dirname, '../assets/test.lambda')),
			        });
			        this.addEnvironment('AWS_NODEJS_CONNECTION_REUSE_ENABLED', '1', { removeInEdge: true });
			    }
			}
			"
		`)
	})

	test<TestContext>('auto-discover works as expected', async (ctx) => {
		const fakeHandler = path.join(ctx.outdir, 'src', 'test.lambda.ts')
		await fs.mkdir(path.dirname(fakeHandler), { recursive: true })
		await fs.writeFile(fakeHandler, 'export const handler = async () => {}')
		new AwsCdkTsEsmLambdaAutoDiscover(ctx.project)
		const comps = ctx.project.components.filter((c) =>
			isComponent(AwsCdkTsEsmLambda, c),
		)
		expect(comps).toHaveLength(1)
		const synth = Testing.synth(ctx.project)
		expect(synth['src/test-function.ts']).toBeDefined()
		expect(synth['src/test-function.ts']).to.include('__filename')
	})
})
