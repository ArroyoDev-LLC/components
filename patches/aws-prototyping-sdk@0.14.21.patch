diff --git a/nx-monorepo/coverage/lcov-report/nx-monorepo.ts.html b/nx-monorepo/coverage/lcov-report/nx-monorepo.ts.html
index 530da63cb2657b2ae1183d04a24d8367db9d9a2a..5f1dc95db29d08f640babd9a76ef71bc7840dade 100644
--- a/nx-monorepo/coverage/lcov-report/nx-monorepo.ts.html
+++ b/nx-monorepo/coverage/lcov-report/nx-monorepo.ts.html
@@ -1544,7 +1544,7 @@ import {
 import { Nx } from "./nx-types";
 import { DEFAULT_CONFIG, SyncpackConfig } from "./syncpack-options";
 &nbsp;
-const NX_MONOREPO_PLUGIN_PATH: string = ".nx/plugins/nx-monorepo-plugin.js";
+const NX_MONOREPO_PLUGIN_PATH: string = ".nx/plugins/nx-monorepo-plugin.cjs";
 &nbsp;
 /**
  * Execute command to run based on package manager configured.
@@ -2242,7 +2242,7 @@ function isNodeProject(project: any) {
 }
 &nbsp;
 function getPluginPath() {
-  return path.join(__dirname, "plugin/nx-monorepo-plugin.js");
+  return path.join(__dirname, "plugin/nx-monorepo-plugin.cjs");
 }
 &nbsp;</pre></td></tr></table></pre>
 
diff --git a/nx-monorepo/src/nx-monorepo.js b/nx-monorepo/src/nx-monorepo.js
index 303662f934d6a25528b9c74a6472f217f121b094..54e81920b7dd3c35335d62cec0deeb8d194e34ce 100644
--- a/nx-monorepo/src/nx-monorepo.js
+++ b/nx-monorepo/src/nx-monorepo.js
@@ -12,7 +12,7 @@ const javascript_1 = require("projen/lib/javascript");
 const python_1 = require("projen/lib/python");
 const typescript_1 = require("projen/lib/typescript");
 const syncpack_options_1 = require("./syncpack-options");
-const NX_MONOREPO_PLUGIN_PATH = ".nx/plugins/nx-monorepo-plugin.js";
+const NX_MONOREPO_PLUGIN_PATH = ".nx/plugins/nx-monorepo-plugin.cjs";
 /**
  * Execute command to run based on package manager configured.
  *
@@ -464,6 +464,6 @@ function isNodeProject(project) {
     return project instanceof javascript_1.NodeProject || project.package;
 }
 function getPluginPath() {
-    return path.join(__dirname, "plugin/nx-monorepo-plugin.js");
+    return path.join(__dirname, "plugin/nx-monorepo-plugin.cjs");
 }
 //# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/nx-monorepo/src/plugin/nx-monorepo-plugin.js b/nx-monorepo/src/plugin/nx-monorepo-plugin.cjs
similarity index 100%
rename from nx-monorepo/src/plugin/nx-monorepo-plugin.js
rename to nx-monorepo/src/plugin/nx-monorepo-plugin.cjs