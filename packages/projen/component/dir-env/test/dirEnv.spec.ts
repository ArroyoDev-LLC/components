import os from 'node:os'
import path from 'node:path'
import { typescript } from 'projen'
import { Testing } from 'projen/lib/testing'
import { beforeEach, expect, test, describe } from 'vitest'
import { DirEnv, DirEnvLogType, DirEnvStdLibCommand } from '../src'

interface TestContext {
	project: typescript.TypeScriptProject
}

beforeEach<TestContext>((ctx) => {
	ctx.project = new typescript.TypeScriptProject({
		name: ctx.meta.id,
		outdir: path.join(os.tmpdir(), ctx.meta.id),
		defaultReleaseBranch: 'main',
	})
})

test<TestContext>('initializes correctly', (ctx) => {
	new DirEnv(ctx.project, { fileName: '.envrc' })
	const synth = Testing.synth(ctx.project)
	expect(synth['.envrc']).toBeDefined()
	expect(synth['.envrc']).toMatchInlineSnapshot('""')
})

describe.each([
	['.envrc', false],
	['.envrc.local', false],
	['.envrc.prod', false],
	['.envrc.dev', false],
	['.env', false],
	['envrc', true],
	['.envrcabc', true],
	['.envrclol', true],
])('validate fileName (%s)', (fileName, doesThrow) => {
	test<TestContext>(`-> throws: ${doesThrow.toString()}`, (ctx) => {
		const exp = expect(() => new DirEnv(ctx.project, { fileName }))
		const assertion = doesThrow ? exp : exp.not
		assertion.toThrowError()
	})
})

test<TestContext>('renders sheBang and marker correctly', (ctx) => {
	const fileName = '.envrc'
	new DirEnv(ctx.project, { fileName }).startBuild()
	const synth = Testing.synth(ctx.project)
	expect(synth[fileName]).toMatchInlineSnapshot(`
		"#!/usr/bin/env bash
		# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
		"
	`)
})

test<TestContext>('helper functions', (ctx) => {
	const fileName = '.envrc'
	new DirEnv(ctx.project, { fileName })
		.startBuild()
		.addCommand(DirEnvStdLibCommand.DIRENV_VERSION, '2.32.1')
		.addBlankLine()
		.addLog(DirEnvLogType.INFO, 'Hello world')
		.addBlankLine()
		.addComment('Required Env Vars')
		.addEnvVar('DEBUG_COLORS', '1')
		.addEnvVar('API_KEY', '', { defaultValue: '' })
	const synth = Testing.synth(ctx.project)
	expect(synth[fileName]).toMatchInlineSnapshot(`
		"#!/usr/bin/env bash
		# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

		direnv_version 2.32.1

		log_status \\"Hello world\\"

		# Required Env Vars
		export DEBUG_COLORS=1
		export API_KEY=\\"\${API_KEY:-}\\""
	`)
})

test<TestContext>('renders default envrc template', (ctx) => {
	const fileName = '.envrc'
	new DirEnv(ctx.project, { fileName })
		.buildDefaultEnvRc({})
		.addComment('Required Env Vars')
		.addEnvVar('DEBUG_COLORS', '', { defaultValue: '1' })
	const synth = Testing.synth(ctx.project)
	expect(synth[fileName]).toMatchInlineSnapshot(`
		"#!/usr/bin/env bash
		# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

		# Team Shared direnv.
		# See: https://github.com/direnv/direnv

		# Enforces \`set -euo pipefail\` despite user local config.
		strict_env

		# forces \\"at least\\"
		direnv_version 2.32.1

		# User local additions.
		source_env_if_exists .envrc.local

		# Load mise (previously known as \\"rtx\\") or asdf
		if has mise && has use_mise; then
		  use mise
		elif has rtx && has use_rtx; then
		  log_status \\"Note: rtx was renamed to mise. Consider migrating your local rtx config to mise. https://mise.jdx.dev/rtx.html\\"
		  use rtx
		elif has asdf && has use_asdf; then
		  log_status \\"mise/rtx not found. Falling back to asdf.\\"
		  use asdf
		else
		  log_error \\"Neither mise (rtx) nor asdf are installed or integrated with direnv.\\"
		  log_error \\"For asdf: https://asdf-vm.com/\\"
		  log_error \\"For mise (asdf clone in rust): https://github.com/jdx/mise\\"
		fi

		layout node

		# Docker
		export COMPOSE_DOCKER_CLI_BUILD=1
		export DOCKER_BUILDKIT=1

		# Required Env Vars
		export DEBUG_COLORS=\\"\${DEBUG_COLORS:-1}\\""
	`)
})
