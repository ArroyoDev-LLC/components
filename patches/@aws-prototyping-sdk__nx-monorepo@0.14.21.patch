diff --git a/lib/nx-monorepo.d.ts b/lib/nx-monorepo.d.ts
index 4b2fbe9368f9b935b2c61e030b5a7fae0f7fe339..88e8581f16aa20dfdfcfe53a05dce93f99a22071 100644
--- a/lib/nx-monorepo.d.ts
+++ b/lib/nx-monorepo.d.ts
@@ -28,6 +28,14 @@ export interface WorkspaceConfig {
      * @default false
      */
     readonly disableNoHoistBundled?: boolean;
+    /**
+     * Links all local workspace project bins so they can be used for local development.
+     *
+     * Package bins are only linked when installed from the registry, however it is very useful
+     * for monorepo development to also utilize these bin scripts. When enabled, this flag will
+     * recursively link all bins from packages.json files to the root node_modules/.bin.
+     */
+    readonly linkLocalWorkspaceBins?: boolean;
     /**
      * List of additional package globs to include in the workspace.
      *
@@ -125,12 +133,19 @@ export interface NxRunManyOptions {
  * @pjid nx-monorepo
  */
 export declare class NxMonorepoProject extends TypeScriptProject {
-    private readonly implicitDependencies;
     private readonly nxConfig?;
     private readonly workspaceConfig?;
     private readonly workspacePackages;
     private readonly nxJson;
+    private readonly _options;
     constructor(options: NxMonorepoProjectOptions);
+    /**
+     * Ensure NXProject is added when adding subprojects to the monorepo.
+     *
+     * @internal
+     * @param subproject project to add.
+     */
+    _addSubProject(subproject: Project): void;
     /**
      * Helper to format `npx nx run-many ...` style command.
      * @param options
@@ -156,8 +171,9 @@ export declare class NxMonorepoProject extends TypeScriptProject {
      *
      * @param dependent project you want to have the dependency.
      * @param dependee project you wish to depend on.
+     * @throws error if this is called on a dependent which does not have a NXProject component attached.
      */
-    addImplicitDependency(dependent: Project, dependee: Project): void;
+    addImplicitDependency(dependent: Project, dependee: Project | string): void;
     /**
      * Add one or more additional package globs to the workspace.
      * @param packageGlobs paths to the package to include in the workspace (for example packages/my-package)
@@ -165,6 +181,12 @@ export declare class NxMonorepoProject extends TypeScriptProject {
     addWorkspacePackages(...packageGlobs: string[]): void;
     private get instantiationOrderSubProjects();
     get subProjects(): Project[];
+    /**
+     * Create symbolic links to all local workspace bins. This enables the usage of bins the same
+     * way as consumers of the packages have when installing from the registry.
+     */
+    protected linkLocalWorkspaceBins(): void;
+    preSynthesize(): void;
     /**
      * @inheritDoc
      */
@@ -173,10 +195,6 @@ export declare class NxMonorepoProject extends TypeScriptProject {
      * Ensures subprojects don't have a default task and that all packages use the same package manager.
      */
     private validateSubProjects;
-    /**
-     * For non-node projects, a package.json is required in order to be discovered by NX.
-     */
-    private synthesizeNonNodePackageJson;
     /**
      * Add a submodule entry to the appropriate workspace file.
      */
diff --git a/lib/nx-monorepo.js b/lib/nx-monorepo.js
index 12e71c152aff7b2d9647821926ec1d1bee1734d7..e16e3c78dd89c27d577483379aed174953570ba6 100644
--- a/lib/nx-monorepo.js
+++ b/lib/nx-monorepo.js
@@ -5,14 +5,13 @@ exports.NxMonorepoProject = exports.buildExecutableCommand = void 0;
 const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
 /*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0 */
-const fs = require("fs");
 const path = require("path");
 const projen_1 = require("projen");
 const javascript_1 = require("projen/lib/javascript");
 const python_1 = require("projen/lib/python");
 const typescript_1 = require("projen/lib/typescript");
+const nx_project_1 = require("./nx-project");
 const syncpack_options_1 = require("./syncpack-options");
-const NX_MONOREPO_PLUGIN_PATH = ".nx/plugins/nx-monorepo-plugin.js";
 /**
  * Execute command to run based on package manager configured.
  *
@@ -20,17 +19,29 @@ const NX_MONOREPO_PLUGIN_PATH = ".nx/plugins/nx-monorepo-plugin.js";
  * @param args args to append.
  */
 function buildExecutableCommand(packageManager, ...args) {
+    const argLiteral = args.length > 0 ? ` ${args.join(" ")}` : "";
     switch (packageManager) {
         case javascript_1.NodePackageManager.YARN:
         case javascript_1.NodePackageManager.YARN2:
-            return `yarn ${args.join(" ")}`;
+            return `yarn${argLiteral}`;
         case javascript_1.NodePackageManager.PNPM:
-            return `pnpx ${args.join(" ")}`;
+            return `pnpx${argLiteral}`;
         default:
-            return `npx ${args.join(" ")}`;
+            return `npx${argLiteral}`;
     }
 }
 exports.buildExecutableCommand = buildExecutableCommand;
+function binCommand(packageManager) {
+    switch (packageManager) {
+        case javascript_1.NodePackageManager.YARN:
+        case javascript_1.NodePackageManager.YARN2:
+            return `yarn bin`;
+        case javascript_1.NodePackageManager.PNPM:
+            return `pnpm bin`;
+        default:
+            return `npm bin`;
+    }
+}
 /**
  * This project type will bootstrap a NX based monorepo with support for polygot
  * builds, build caching, dependency graph visualization and much more.
@@ -61,10 +72,28 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
                 include: ["**/*.ts"],
             },
         });
+        this._options = options;
+        // engines
+        this.package.addEngine("node", ">=16");
+        switch (this.package.packageManager) {
+            case javascript_1.NodePackageManager.PNPM: {
+                // https://pnpm.io/package_json
+                // https://github.com/pnpm/pnpm/releases/tag/v8.0.0
+                this.package.addEngine("pnpm", ">=8");
+                break;
+            }
+            case javascript_1.NodePackageManager.YARN: {
+                this.package.addEngine("yarn", ">=1 <2");
+                break;
+            }
+            case javascript_1.NodePackageManager.YARN2: {
+                this.package.addEngine("yarn", ">=2 <3");
+                break;
+            }
+        }
         this.nxConfig = options.nxConfig;
         this.workspaceConfig = options.workspaceConfig;
         this.workspacePackages = options.workspaceConfig?.additionalPackages ?? [];
-        this.implicitDependencies = this.nxConfig?.implicitDependencies || {};
         // Never publish a monorepo root package.
         this.package.addField("private", true);
         // Add alias task for "projen" to synthesize workspace
@@ -75,8 +104,16 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
         this.addTask("run-many", {
             receiveArgs: true,
             exec: buildExecutableCommand(this.package.packageManager, "nx", "run-many"),
+            env: {
+                NX_NON_NATIVE_HASHER: "true",
+            },
             description: "Run task against multiple workspace projects",
         });
+        this.addTask("graph", {
+            receiveArgs: true,
+            exec: buildExecutableCommand(this.package.packageManager, "nx", "graph"),
+            description: "Generate dependency graph for monorepo",
+        });
         // Map tasks to nx run-many
         if (options.scripts == null || options.scripts.build == null) {
             this._overrideNxBuildTask(this.buildTask, { target: "build" }, true);
@@ -131,14 +168,9 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
         options.nxConfig?.nxCloudReadOnlyAccessToken &&
             this.addDevDeps("@nrwl/nx-cloud");
         new projen_1.IgnoreFile(this, ".nxignore").exclude("test-reports", "target", ".env", ".pytest_cache", ...(this.nxConfig?.nxIgnore || []));
-        new projen_1.TextFile(this, NX_MONOREPO_PLUGIN_PATH, {
-            readonly: true,
-            lines: fs.readFileSync(getPluginPath()).toString("utf-8").split("\n"),
-        });
         this.nxJson = new projen_1.JsonFile(this, "nx.json", {
             obj: {
                 extends: "@nrwl/workspace/presets/npm.json",
-                plugins: [`./${NX_MONOREPO_PLUGIN_PATH}`],
                 npmScope: "monorepo",
                 tasksRunnerOptions: {
                     default: {
@@ -161,7 +193,6 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
                     ...options.nxConfig?.namedInputs,
                 },
                 targetDefaults: options.nxConfig?.targetDefaults,
-                implicitDependencies: this.implicitDependencies,
                 targetDependencies: {
                     build: [
                         {
@@ -177,6 +208,17 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
             },
         });
     }
+    /**
+     * Ensure NXProject is added when adding subprojects to the monorepo.
+     *
+     * @internal
+     * @param subproject project to add.
+     */
+    _addSubProject(subproject) {
+        !nx_project_1.NxProject.of(subproject) &&
+            subproject._addComponent(new nx_project_1.NxProject(subproject));
+        super._addSubProject(subproject);
+    }
     /**
      * Helper to format `npx nx run-many ...` style command.
      * @param options
@@ -235,6 +277,8 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
             receiveArgs: true,
         });
         task.description += " for all affected projects";
+        // Fix for https://github.com/nrwl/nx/pull/15071
+        task.env("NX_NON_NATIVE_HASHER", "true");
         return task;
     }
     /**
@@ -244,6 +288,9 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
         return this.addTask(name, {
             receiveArgs: true,
             exec: this.formatNxRunManyCommand(options),
+            env: {
+                NX_NON_NATIVE_HASHER: "true",
+            },
         });
     }
     /**
@@ -253,13 +300,15 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
      *
      * @param dependent project you want to have the dependency.
      * @param dependee project you wish to depend on.
+     * @throws error if this is called on a dependent which does not have a NXProject component attached.
      */
     addImplicitDependency(dependent, dependee) {
-        if (this.implicitDependencies[dependent.name]) {
-            this.implicitDependencies[dependent.name].push(dependee.name);
+        const nxProject = nx_project_1.NxProject.of(dependent);
+        if (!nxProject) {
+            throw new Error(`${dependent.name} does not have an NXProject associated.`);
         }
         else {
-            this.implicitDependencies[dependent.name] = [dependee.name];
+            nxProject.addImplicitDependency(dependee);
         }
     }
     /**
@@ -284,6 +333,46 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
     get subProjects() {
         return this.instantiationOrderSubProjects.sort((a, b) => a.name.localeCompare(b.name));
     }
+    /**
+     * Create symbolic links to all local workspace bins. This enables the usage of bins the same
+     * way as consumers of the packages have when installing from the registry.
+     */
+    linkLocalWorkspaceBins() {
+        const bins = [];
+        this.subProjects.forEach((subProject) => {
+            if (subProject instanceof javascript_1.NodeProject) {
+                const pkgBins = subProject.package.manifest.bin() || {};
+                bins.push(...Object.entries(pkgBins).map(([cmd, bin]) => {
+                    const resolvedBin = path.join("$PWD", path.relative(this.outdir, subProject.outdir), bin);
+                    return [cmd, resolvedBin];
+                }));
+            }
+        });
+        const linkTask = this.addTask("workspace:bin:link", {
+            steps: bins.map(([cmd, bin]) => ({
+                exec: `ln -s ${bin} $(${binCommand(this.package.packageManager)})/${cmd} &>/dev/null; exit 0;`,
+            })),
+        });
+        (this.tasks.tryFind("prepare") || this.addTask("prepare")).spawn(linkTask);
+    }
+    preSynthesize() {
+        super.preSynthesize();
+        if (this._options.workspaceConfig?.linkLocalWorkspaceBins === true) {
+            this.linkLocalWorkspaceBins();
+        }
+        if (this.package.packageManager === javascript_1.NodePackageManager.PNPM) {
+            // PNPM hoisting hides transitive bundled dependencies which results in
+            // transitive dependencies being packed incorrectly.
+            this.subProjects.forEach((subProject) => {
+                if (isNodeProject(subProject) && getBundledDeps(subProject).length) {
+                    const pkgFolder = path.relative(this.root.outdir, subProject.outdir);
+                    // Create a symlink in the sub-project node_modules for all transitive deps
+                    // before running "package" task
+                    subProject.packageTask.prependExec(`pdk@pnpm-link-bundled-transitive-deps ${pkgFolder}`);
+                }
+            });
+        }
+    }
     /**
      * @inheritDoc
      */
@@ -291,7 +380,6 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
         this.validateSubProjects();
         this.updateWorkspace();
         this.wirePythonDependencies();
-        this.synthesizeNonNodePackageJson();
         // Prevent sub NodeProject packages from `postSynthesis` which will cause individual/extraneous installs.
         // The workspace package install will handle all the sub NodeProject packages automatically.
         const subProjectPackages = [];
@@ -304,7 +392,7 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
             }
         });
         super.synth();
-        // Force workspace install deps if any node subproject package has change, unless the workspace changed
+        // Force workspace install deps if any node subproject package has changed, unless the workspace changed
         if (
         // @ts-ignore - `file` is private
         this.package.file.changed !== true &&
@@ -327,32 +415,6 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
             }
         });
     }
-    /**
-     * For non-node projects, a package.json is required in order to be discovered by NX.
-     */
-    synthesizeNonNodePackageJson() {
-        this.subProjects
-            .filter((subProject) => !isNodeProject(subProject))
-            .filter((subProject) => !subProject.tryFindFile("package.json"))
-            .forEach((subProject) => {
-            // generate a package.json if not found
-            const manifest = {
-                name: subProject.name,
-                private: true,
-                __pdk__: true,
-                devDependencies: { projen: "*" },
-                scripts: subProject.tasks.all.reduce((p, c) => ({
-                    [c.name]: `${buildExecutableCommand(this.package.packageManager)} projen ${c.name}`,
-                    ...p,
-                }), {}),
-                version: "0.0.0",
-            };
-            new projen_1.JsonFile(subProject, "package.json", {
-                obj: manifest,
-                readonly: true,
-            });
-        });
-    }
     /**
      * Add a submodule entry to the appropriate workspace file.
      */
@@ -365,9 +427,7 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
         if (this.workspaceConfig?.disableNoHoistBundled !== true) {
             const noHoistBundled = this.subProjects.flatMap((sub) => {
                 if (sub instanceof javascript_1.NodeProject) {
-                    return sub.deps.all
-                        .filter((dep) => dep.type === projen_1.DependencyType.BUNDLED)
-                        .flatMap((dep) => [
+                    return getBundledDeps(sub).flatMap((dep) => [
                         `${sub.name}/${dep.name}`,
                         `${sub.name}/${dep.name}/*`,
                     ]);
@@ -453,7 +513,7 @@ class NxMonorepoProject extends typescript_1.TypeScriptProject {
 }
 exports.NxMonorepoProject = NxMonorepoProject;
 _a = JSII_RTTI_SYMBOL_1;
-NxMonorepoProject[_a] = { fqn: "@aws-prototyping-sdk/nx-monorepo.NxMonorepoProject", version: "0.14.21" };
+NxMonorepoProject[_a] = { fqn: "@aws-prototyping-sdk/nx-monorepo.NxMonorepoProject", version: "0.0.0" };
 /**
  * Determines if the passed in project is of type NodeProject.
  *
@@ -463,7 +523,10 @@ NxMonorepoProject[_a] = { fqn: "@aws-prototyping-sdk/nx-monorepo.NxMonorepoProje
 function isNodeProject(project) {
     return project instanceof javascript_1.NodeProject || project.package;
 }
-function getPluginPath() {
-    return path.join(__dirname, "plugin/nx-monorepo-plugin.js");
+/**
+ * Gets bundled dependencies for a given project
+ */
+function getBundledDeps(project) {
+    return project.deps.all.filter((dep) => dep.type === projen_1.DependencyType.BUNDLED);
 }
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/lib/nx-project.d.ts b/lib/nx-project.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e3c8be4892a6289b2e9b81ec4a5415ed2f8d26b6
--- /dev/null
+++ b/lib/nx-project.d.ts
@@ -0,0 +1,32 @@
+import { Component, Project } from "projen";
+/**
+ * Component which manged the project specific NX Config and is added to all NXMonorepo subprojects.
+ *
+ */
+export declare class NxProject extends Component {
+    /**
+     * Retrieves an instance of NXProject if one is associated to the given project.
+     *
+     * @param project project instance.
+     */
+    static of(project: Project): NxProject | undefined;
+    /**
+     * List of implicit dependencies.
+     *
+     * @internal
+     * @private
+     */
+    private readonly _implicitDependencies;
+    constructor(project: Project);
+    /**
+     * Adds an implicit dependency between the dependant (this project) and dependee.
+     *
+     * @param dependee project to add the implicit dependency on.
+     */
+    addImplicitDependency(dependee: Project | string): void;
+    /**
+     * Generate a nx block in the package.json if this is a NodeProject. Otherwise generate a project.json with
+     * the relevant NX configuration.
+     */
+    synthesize(): void;
+}
diff --git a/lib/nx-project.js b/lib/nx-project.js
new file mode 100644
index 0000000000000000000000000000000000000000..bc17a91de416195ec141ac181b29f32f58e02a13
--- /dev/null
+++ b/lib/nx-project.js
@@ -0,0 +1,79 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.NxProject = void 0;
+/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
+SPDX-License-Identifier: Apache-2.0 */
+const path = require("path");
+const projen_1 = require("projen");
+const javascript_1 = require("projen/lib/javascript");
+const nx_monorepo_1 = require("./nx-monorepo");
+/**
+ * Component which manged the project specific NX Config and is added to all NXMonorepo subprojects.
+ *
+ */
+class NxProject extends projen_1.Component {
+    constructor(project) {
+        super(project);
+        /**
+         * List of implicit dependencies.
+         *
+         * @internal
+         * @private
+         */
+        this._implicitDependencies = [];
+    }
+    /**
+     * Retrieves an instance of NXProject if one is associated to the given project.
+     *
+     * @param project project instance.
+     */
+    static of(project) {
+        return project.components.find((c) => c instanceof NxProject);
+    }
+    /**
+     * Adds an implicit dependency between the dependant (this project) and dependee.
+     *
+     * @param dependee project to add the implicit dependency on.
+     */
+    addImplicitDependency(dependee) {
+        this._implicitDependencies.push(dependee instanceof projen_1.Project ? dependee.name : dependee);
+    }
+    /**
+     * Generate a nx block in the package.json if this is a NodeProject. Otherwise generate a project.json with
+     * the relevant NX configuration.
+     */
+    synthesize() {
+        if (this.project instanceof javascript_1.NodeProject) {
+            this._implicitDependencies.length > 0 &&
+                this.project
+                    .tryFindObjectFile("package.json")
+                    ?.addOverride("nx.implicitDependencies", this._implicitDependencies);
+        }
+        else {
+            const projectJson = this.project.tryFindObjectFile("project.json") ||
+                new projen_1.JsonFile(this.project, "project.json", {
+                    readonly: true,
+                    marker: true,
+                    obj: {},
+                });
+            const projectPath = path.relative(this.project.root.outdir, this.project.outdir);
+            projectJson.addOverride("name", this.project.name);
+            projectJson.addOverride("root", projectPath);
+            this._implicitDependencies.length > 0 &&
+                projectJson.addOverride("implicitDependencies", this._implicitDependencies);
+            projectJson.addOverride("targets", this.project.tasks.all.reduce((p, c) => ({
+                [c.name]: {
+                    executor: "nx:run-commands",
+                    options: {
+                        command: `${nx_monorepo_1.buildExecutableCommand(this.project.root.package.packageManager, `projen ${c.name}`)}`,
+                        cwd: projectPath,
+                    },
+                },
+                ...p,
+            }), {}));
+        }
+        super.synthesize();
+    }
+}
+exports.NxProject = NxProject;
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibngtcHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ueC1wcm9qZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBO3NDQUNzQztBQUN0Qyw2QkFBNkI7QUFDN0IsbUNBQXNEO0FBQ3RELHNEQUFvRDtBQUNwRCwrQ0FBdUQ7QUFFdkQ7OztHQUdHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsa0JBQVM7SUFvQnRDLFlBQVksT0FBZ0I7UUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBVGpCOzs7OztXQUtHO1FBQ2MsMEJBQXFCLEdBQWEsRUFBRSxDQUFDO0lBSXRELENBQUM7SUFyQkQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBZ0I7UUFDeEIsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLFNBQVMsQ0FFL0MsQ0FBQztJQUNoQixDQUFDO0lBY0Q7Ozs7T0FJRztJQUNJLHFCQUFxQixDQUFDLFFBQTBCO1FBQ3JELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQzdCLFFBQVEsWUFBWSxnQkFBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQ3ZELENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSx3QkFBVyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLE9BQU87cUJBQ1QsaUJBQWlCLENBQUMsY0FBYyxDQUFDO29CQUNsQyxFQUFFLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUMxRTthQUFNO1lBQ0wsTUFBTSxXQUFXLEdBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7Z0JBQzlDLElBQUksaUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRTtvQkFDekMsUUFBUSxFQUFFLElBQUk7b0JBQ2QsTUFBTSxFQUFFLElBQUk7b0JBQ1osR0FBRyxFQUFFLEVBQUU7aUJBQ1IsQ0FBQyxDQUFDO1lBRUwsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FDcEIsQ0FBQztZQUNGLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNuQyxXQUFXLENBQUMsV0FBVyxDQUNyQixzQkFBc0IsRUFDdEIsSUFBSSxDQUFDLHFCQUFxQixDQUMzQixDQUFDO1lBQ0osV0FBVyxDQUFDLFdBQVcsQ0FDckIsU0FBUyxFQUNULElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQzNCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDVCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDUixRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixPQUFPLEVBQUU7d0JBQ1AsT0FBTyxFQUFFLEdBQUcsb0NBQXNCLENBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBb0IsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUN6RCxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDbkIsRUFBRTt3QkFDSCxHQUFHLEVBQUUsV0FBVztxQkFDakI7aUJBQ0Y7Z0JBQ0QsR0FBRyxDQUFDO2FBQ0wsQ0FBQyxFQUNGLEVBQUUsQ0FDSCxDQUNGLENBQUM7U0FDSDtRQUNELEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUF2RkQsOEJBdUZDIiwic291cmNlc0NvbnRlbnQiOlsiLyohIENvcHlyaWdodCBbQW1hem9uLmNvbV0oaHR0cDovL2FtYXpvbi5jb20vKSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wICovXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBDb21wb25lbnQsIEpzb25GaWxlLCBQcm9qZWN0IH0gZnJvbSBcInByb2plblwiO1xuaW1wb3J0IHsgTm9kZVByb2plY3QgfSBmcm9tIFwicHJvamVuL2xpYi9qYXZhc2NyaXB0XCI7XG5pbXBvcnQgeyBidWlsZEV4ZWN1dGFibGVDb21tYW5kIH0gZnJvbSBcIi4vbngtbW9ub3JlcG9cIjtcblxuLyoqXG4gKiBDb21wb25lbnQgd2hpY2ggbWFuZ2VkIHRoZSBwcm9qZWN0IHNwZWNpZmljIE5YIENvbmZpZyBhbmQgaXMgYWRkZWQgdG8gYWxsIE5YTW9ub3JlcG8gc3VicHJvamVjdHMuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgTnhQcm9qZWN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbiBpbnN0YW5jZSBvZiBOWFByb2plY3QgaWYgb25lIGlzIGFzc29jaWF0ZWQgdG8gdGhlIGdpdmVuIHByb2plY3QuXG4gICAqXG4gICAqIEBwYXJhbSBwcm9qZWN0IHByb2plY3QgaW5zdGFuY2UuXG4gICAqL1xuICBzdGF0aWMgb2YocHJvamVjdDogUHJvamVjdCk6IE54UHJvamVjdCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHByb2plY3QuY29tcG9uZW50cy5maW5kKChjKSA9PiBjIGluc3RhbmNlb2YgTnhQcm9qZWN0KSBhc1xuICAgICAgfCBOeFByb2plY3RcbiAgICAgIHwgdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgaW1wbGljaXQgZGVwZW5kZW5jaWVzLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2ltcGxpY2l0RGVwZW5kZW5jaWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByb2plY3Q6IFByb2plY3QpIHtcbiAgICBzdXBlcihwcm9qZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGltcGxpY2l0IGRlcGVuZGVuY3kgYmV0d2VlbiB0aGUgZGVwZW5kYW50ICh0aGlzIHByb2plY3QpIGFuZCBkZXBlbmRlZS5cbiAgICpcbiAgICogQHBhcmFtIGRlcGVuZGVlIHByb2plY3QgdG8gYWRkIHRoZSBpbXBsaWNpdCBkZXBlbmRlbmN5IG9uLlxuICAgKi9cbiAgcHVibGljIGFkZEltcGxpY2l0RGVwZW5kZW5jeShkZXBlbmRlZTogUHJvamVjdCB8IHN0cmluZykge1xuICAgIHRoaXMuX2ltcGxpY2l0RGVwZW5kZW5jaWVzLnB1c2goXG4gICAgICBkZXBlbmRlZSBpbnN0YW5jZW9mIFByb2plY3QgPyBkZXBlbmRlZS5uYW1lIDogZGVwZW5kZWVcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgbnggYmxvY2sgaW4gdGhlIHBhY2thZ2UuanNvbiBpZiB0aGlzIGlzIGEgTm9kZVByb2plY3QuIE90aGVyd2lzZSBnZW5lcmF0ZSBhIHByb2plY3QuanNvbiB3aXRoXG4gICAqIHRoZSByZWxldmFudCBOWCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgc3ludGhlc2l6ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9qZWN0IGluc3RhbmNlb2YgTm9kZVByb2plY3QpIHtcbiAgICAgIHRoaXMuX2ltcGxpY2l0RGVwZW5kZW5jaWVzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgdGhpcy5wcm9qZWN0XG4gICAgICAgICAgLnRyeUZpbmRPYmplY3RGaWxlKFwicGFja2FnZS5qc29uXCIpXG4gICAgICAgICAgPy5hZGRPdmVycmlkZShcIm54LmltcGxpY2l0RGVwZW5kZW5jaWVzXCIsIHRoaXMuX2ltcGxpY2l0RGVwZW5kZW5jaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJvamVjdEpzb24gPVxuICAgICAgICB0aGlzLnByb2plY3QudHJ5RmluZE9iamVjdEZpbGUoXCJwcm9qZWN0Lmpzb25cIikgfHxcbiAgICAgICAgbmV3IEpzb25GaWxlKHRoaXMucHJvamVjdCwgXCJwcm9qZWN0Lmpzb25cIiwge1xuICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgIG1hcmtlcjogdHJ1ZSxcbiAgICAgICAgICBvYmo6IHt9LFxuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgcHJvamVjdFBhdGggPSBwYXRoLnJlbGF0aXZlKFxuICAgICAgICB0aGlzLnByb2plY3Qucm9vdC5vdXRkaXIsXG4gICAgICAgIHRoaXMucHJvamVjdC5vdXRkaXJcbiAgICAgICk7XG4gICAgICBwcm9qZWN0SnNvbi5hZGRPdmVycmlkZShcIm5hbWVcIiwgdGhpcy5wcm9qZWN0Lm5hbWUpO1xuICAgICAgcHJvamVjdEpzb24uYWRkT3ZlcnJpZGUoXCJyb290XCIsIHByb2plY3RQYXRoKTtcbiAgICAgIHRoaXMuX2ltcGxpY2l0RGVwZW5kZW5jaWVzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgcHJvamVjdEpzb24uYWRkT3ZlcnJpZGUoXG4gICAgICAgICAgXCJpbXBsaWNpdERlcGVuZGVuY2llc1wiLFxuICAgICAgICAgIHRoaXMuX2ltcGxpY2l0RGVwZW5kZW5jaWVzXG4gICAgICAgICk7XG4gICAgICBwcm9qZWN0SnNvbi5hZGRPdmVycmlkZShcbiAgICAgICAgXCJ0YXJnZXRzXCIsXG4gICAgICAgIHRoaXMucHJvamVjdC50YXNrcy5hbGwucmVkdWNlKFxuICAgICAgICAgIChwLCBjKSA9PiAoe1xuICAgICAgICAgICAgW2MubmFtZV06IHtcbiAgICAgICAgICAgICAgZXhlY3V0b3I6IFwibng6cnVuLWNvbW1hbmRzXCIsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBgJHtidWlsZEV4ZWN1dGFibGVDb21tYW5kKFxuICAgICAgICAgICAgICAgICAgKHRoaXMucHJvamVjdC5yb290IGFzIE5vZGVQcm9qZWN0KS5wYWNrYWdlLnBhY2thZ2VNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgYHByb2plbiAke2MubmFtZX1gXG4gICAgICAgICAgICAgICAgKX1gLFxuICAgICAgICAgICAgICAgIGN3ZDogcHJvamVjdFBhdGgsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4ucCxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7fVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICBzdXBlci5zeW50aGVzaXplKCk7XG4gIH1cbn1cbiJdfQ==
\ No newline at end of file
diff --git a/lib/nx-types.d.ts b/lib/nx-types.d.ts
index 98ff3b73a06cd65f4861ff2c580a643c61a312f9..531ea07db6fef10d9f6fcf34ee72f2eca6c84c7e 100644
--- a/lib/nx-types.d.ts
+++ b/lib/nx-types.d.ts
@@ -34,12 +34,6 @@ export declare namespace Nx {
          */
         readonly dependsOn?: TargetDependency[];
     }
-    /**
-     * Implicit Dependencies map.
-     */
-    type ImplicitDependencies = {
-        [pkg: string]: string[];
-    };
     /**
      * Supported enums for a TargetDependency.
      */
@@ -98,12 +92,6 @@ export declare namespace Nx {
          * @default mainline
          */
         readonly affectedBranch?: string;
-        /**
-         * Configuration for Implicit Dependencies.
-         *
-         * @see https://nx.dev/configuration/packagejson#implicitdependencies
-         */
-        readonly implicitDependencies?: ImplicitDependencies;
         /**
          * Configuration for TargetDependencies.
          *
diff --git a/lib/nx-types.js b/lib/nx-types.js
index a01221db1bcbbfc5daf50455c92673e62e7be916..7e3c7d74ac4bdc013937a34dbc916409de0b319d 100644
--- a/lib/nx-types.js
+++ b/lib/nx-types.js
@@ -26,4 +26,4 @@ var Nx;
         TargetDependencyProject["DEPENDENCIES"] = "dependencies";
     })(TargetDependencyProject = Nx.TargetDependencyProject || (Nx.TargetDependencyProject = {}));
 })(Nx = exports.Nx || (exports.Nx = {}));
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibngtdHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbngtdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7c0NBQ3NDO0FBQ3RDLElBQWlCLEVBQUUsQ0F1TGxCO0FBdkxELFdBQWlCLEVBQUU7SUF1Q2pCOztPQUVHO0lBQ0gsSUFBWSx1QkFlWDtJQWZELFdBQVksdUJBQXVCO1FBQ2pDOzs7OztXQUtHO1FBQ0gsd0NBQWEsQ0FBQTtRQUNiOzs7OztXQUtHO1FBQ0gsd0RBQTZCLENBQUE7SUFDL0IsQ0FBQyxFQWZXLHVCQUF1QixHQUF2QiwwQkFBdUIsS0FBdkIsMEJBQXVCLFFBZWxDO0FBOEhILENBQUMsRUF2TGdCLEVBQUUsR0FBRixVQUFFLEtBQUYsVUFBRSxRQXVMbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQ29weXJpZ2h0IFtBbWF6b24uY29tXShodHRwOi8vYW1hem9uLmNvbS8pLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAgKi9cbmV4cG9ydCBuYW1lc3BhY2UgTngge1xuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgbnggdGFyZ2V0RGVwZW5kZW5jaWVzLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVGFyZ2V0RGVwZW5kZW5jaWVzID0geyBbdGFyZ2V0OiBzdHJpbmddOiBUYXJnZXREZXBlbmRlbmN5W10gfTtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgcHJvamVjdCBzcGVjaWZpYyB0YXJnZXRzLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgUHJvamVjdFRhcmdldHMgPSB7IFt0YXJnZXQ6IHN0cmluZ106IFByb2plY3RUYXJnZXQgfTtcblxuICAvKipcbiAgICogUHJvamVjdCBUYXJnZXQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFByb2plY3RUYXJnZXQge1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgaW5wdXRzIHRvIGhhc2ggZm9yIGNhY2hlIGtleSwgcmVsYXRpdmUgdG8gdGhlIHJvb3Qgb2YgdGhlIG1vbm9yZXBvLlxuICAgICAqXG4gICAgICogbm90ZTogbXVzdCBzdGFydCB3aXRoIGxlYWRpbmcgL1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGlucHV0cz86IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygb3V0cHV0cyB0byBjYWNoZSwgcmVsYXRpdmUgdG8gdGhlIHJvb3Qgb2YgdGhlIG1vbm9yZXBvLlxuICAgICAqXG4gICAgICogbm90ZTogbXVzdCBzdGFydCB3aXRoIGxlYWRpbmcgL1xuICAgICAqL1xuICAgIHJlYWRvbmx5IG91dHB1dHM/OiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgVGFyZ2V0IERlcGVuZGVuY2llcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXBlbmRzT24/OiBUYXJnZXREZXBlbmRlbmN5W107XG4gIH1cblxuICAvKipcbiAgICogSW1wbGljaXQgRGVwZW5kZW5jaWVzIG1hcC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEltcGxpY2l0RGVwZW5kZW5jaWVzID0geyBbcGtnOiBzdHJpbmddOiBzdHJpbmdbXSB9O1xuXG4gIC8qKlxuICAgKiBTdXBwb3J0ZWQgZW51bXMgZm9yIGEgVGFyZ2V0RGVwZW5kZW5jeS5cbiAgICovXG4gIGV4cG9ydCBlbnVtIFRhcmdldERlcGVuZGVuY3lQcm9qZWN0IHtcbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbHkgb24gdGhlIHBhY2thZ2Ugd2hlcmUgdGhlIHRhcmdldCBpcyBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHVzdWFsbHkgZG9uZSBmb3IgdGVzdCBsaWtlIHRhcmdldHMgd2hlcmUgeW91IG9ubHkgd2FudCB0byBydW4gdW5pdFxuICAgICAqIHRlc3RzIG9uIHRoZSB0YXJnZXQgcGFja2FnZXMgd2l0aG91dCB0ZXN0aW5nIGFsbCBkZXBlbmRlbnQgcGFja2FnZXMuXG4gICAgICovXG4gICAgU0VMRiA9IFwic2VsZlwiLFxuICAgIC8qKlxuICAgICAqIFRhcmdldCByZWxpZXMgb24gZXhlY3V0aW5nIHRoZSB0YXJnZXQgYWdhaW5zdCBhbGwgZGVwZW5kZW5jaWVzIGZpcnN0LlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c3VhbGx5IGRvbmUgZm9yIGJ1aWxkIGxpa2UgdGFyZ2V0cyB3aGVyZSB5b3Ugd2FudCB0byBidWlsZCBhbGxcbiAgICAgKiBkZXBlbmRhbnQgcHJvamVjdHMgZmlyc3QuXG4gICAgICovXG4gICAgREVQRU5ERU5DSUVTID0gXCJkZXBlbmRlbmNpZXNcIixcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIGFuIE5YIFRhcmdldCBEZXBlbmRlbmN5LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUYXJnZXREZXBlbmRlbmN5IHtcbiAgICAvKipcbiAgICAgKiBQcm9qZW4gdGFyZ2V0IGkuZTogYnVpbGQsIHRlc3QsIGV0Y1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhcmdldDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0IGRlcGVuZGVuY2llcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcm9qZWN0czogVGFyZ2V0RGVwZW5kZW5jeVByb2plY3Q7XG4gIH1cblxuICAvKipcbiAgICogTmFtZWQgaW5wdXRzIGNvbmZpZ1xuICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L3JlZmVyZW5jZS9ueC1qc29uI2lucHV0cy0mLW5hbWVkaW5wdXRzXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE5hbWVkSW5wdXRzIHtcbiAgICByZWFkb25seSBbbmFtZTogc3RyaW5nXTogc3RyaW5nW107XG4gIH1cblxuICAvKipcbiAgICogVGFyZ2V0IGRlZmF1bHRzIGNvbmZpZ1xuICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L3JlZmVyZW5jZS9ueC1qc29uI3RhcmdldC1kZWZhdWx0c1xuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUYXJnZXREZWZhdWx0cyB7XG4gICAgcmVhZG9ubHkgW25hbWU6IHN0cmluZ106IFByb2plY3RUYXJnZXQ7XG4gIH1cblxuICAvKipcbiAgICogTlggd29ya3NwYWNlIGNvbmZpZ3VyYXRpb25zLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L2NvbmZpZ3VyYXRpb24vcGFja2FnZWpzb25cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgV29ya3NwYWNlQ29uZmlnIHtcbiAgICAvKipcbiAgICAgKiBBZmZlY3RlZCBicmFuY2guXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBtYWlubGluZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFmZmVjdGVkQnJhbmNoPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIEltcGxpY2l0IERlcGVuZGVuY2llcy5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvY29uZmlndXJhdGlvbi9wYWNrYWdlanNvbiNpbXBsaWNpdGRlcGVuZGVuY2llc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGltcGxpY2l0RGVwZW5kZW5jaWVzPzogSW1wbGljaXREZXBlbmRlbmNpZXM7XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciBUYXJnZXREZXBlbmRlbmNpZXMuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L2NvbmZpZ3VyYXRpb24vcGFja2FnZWpzb24jdGFyZ2V0LWRlcGVuZGVuY2llc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhcmdldERlcGVuZGVuY2llcz86IFRhcmdldERlcGVuZGVuY2llcztcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgcGF0dGVybnMgdG8gaW5jbHVkZSBpbiB0aGUgLm54aWdub3JlIGZpbGUuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L2NvbmZpZ3VyYXRpb24vcGFja2FnZWpzb24jbnhpZ25vcmVcbiAgICAgKi9cbiAgICByZWFkb25seSBueElnbm9yZT86IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBvbmx5IGFjY2VzcyB0b2tlbiBpZiBlbmFibGluZyBueCBjbG91ZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBueENsb3VkUmVhZE9ubHlBY2Nlc3NUb2tlbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGxpc3Qgb2YgdGFyZ2V0cy9vcGVyYXRpb25zIHRoYXQgYXJlIGNhY2hlZCBieSBOeFxuICAgICAqXG4gICAgICogQGRlZmF1bHQgW1wiYnVpbGRcIiwgXCJ0ZXN0XCJdXG4gICAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvbngtanNvbiN0YXNrcy1ydW5uZXItb3B0aW9uc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGNhY2hlYWJsZU9wZXJhdGlvbnM/OiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIE5hbWVkIGlucHV0c1xuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvcmVmZXJlbmNlL254LWpzb24jaW5wdXRzLSYtbmFtZWRpbnB1dHNcbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lZElucHV0cz86IE5hbWVkSW5wdXRzO1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0IGRlZmF1bHRzXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L3JlZmVyZW5jZS9ueC1qc29uI3RhcmdldC1kZWZhdWx0c1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhcmdldERlZmF1bHRzPzogVGFyZ2V0RGVmYXVsdHM7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFByb2plY3RDb25maWcge1xuICAgIC8qKlxuICAgICAqIE5hbWVkIGlucHV0c1xuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvcmVmZXJlbmNlL254LWpzb24jaW5wdXRzLSYtbmFtZWRpbnB1dHNcbiAgICAgKi9cbiAgICByZWFkb25seSBuYW1lZElucHV0cz86IE5hbWVkSW5wdXRzO1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyBjb25maWd1cmF0aW9uXG4gICAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvcHJvamVjdC1jb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFyZ2V0cz86IFByb2plY3RUYXJnZXRzO1xuXG4gICAgLyoqXG4gICAgICogUHJvamVjdCB0YWcgYW5ub3RhdGlvbnNcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvcmVmZXJlbmNlL3Byb2plY3QtY29uZmlndXJhdGlvbiN0YWdzXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogSW1wbGljaXQgZGVwZW5kZW5jaWVzXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L3JlZmVyZW5jZS9wcm9qZWN0LWNvbmZpZ3VyYXRpb24jaW1wbGljaXRkZXBlbmRlbmNpZXNcbiAgICAgKi9cbiAgICByZWFkb25seSBpbXBsaWNpdERlcGVuZGVuY2llcz86IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogRXhwbGljaXQgbGlzdCBvZiBzY3JpcHRzIGZvciBOeCB0byBpbmNsdWRlLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvcmVmZXJlbmNlL3Byb2plY3QtY29uZmlndXJhdGlvbiNpZ25vcmluZy1wYWNrYWdlLmpzb24tc2NyaXB0c1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGluY2x1ZGVkU2NyaXB0cz86IHN0cmluZ1tdO1xuICB9XG59XG4iXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibngtdHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbngtdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7c0NBQ3NDO0FBQ3RDLElBQWlCLEVBQUUsQ0E0S2xCO0FBNUtELFdBQWlCLEVBQUU7SUFrQ2pCOztPQUVHO0lBQ0gsSUFBWSx1QkFlWDtJQWZELFdBQVksdUJBQXVCO1FBQ2pDOzs7OztXQUtHO1FBQ0gsd0NBQWEsQ0FBQTtRQUNiOzs7OztXQUtHO1FBQ0gsd0RBQTZCLENBQUE7SUFDL0IsQ0FBQyxFQWZXLHVCQUF1QixHQUF2QiwwQkFBdUIsS0FBdkIsMEJBQXVCLFFBZWxDO0FBd0hILENBQUMsRUE1S2dCLEVBQUUsR0FBRixVQUFFLEtBQUYsVUFBRSxRQTRLbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQ29weXJpZ2h0IFtBbWF6b24uY29tXShodHRwOi8vYW1hem9uLmNvbS8pLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAgKi9cbmV4cG9ydCBuYW1lc3BhY2UgTngge1xuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgbnggdGFyZ2V0RGVwZW5kZW5jaWVzLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVGFyZ2V0RGVwZW5kZW5jaWVzID0geyBbdGFyZ2V0OiBzdHJpbmddOiBUYXJnZXREZXBlbmRlbmN5W10gfTtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgcHJvamVjdCBzcGVjaWZpYyB0YXJnZXRzLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgUHJvamVjdFRhcmdldHMgPSB7IFt0YXJnZXQ6IHN0cmluZ106IFByb2plY3RUYXJnZXQgfTtcblxuICAvKipcbiAgICogUHJvamVjdCBUYXJnZXQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFByb2plY3RUYXJnZXQge1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgaW5wdXRzIHRvIGhhc2ggZm9yIGNhY2hlIGtleSwgcmVsYXRpdmUgdG8gdGhlIHJvb3Qgb2YgdGhlIG1vbm9yZXBvLlxuICAgICAqXG4gICAgICogbm90ZTogbXVzdCBzdGFydCB3aXRoIGxlYWRpbmcgL1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGlucHV0cz86IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygb3V0cHV0cyB0byBjYWNoZSwgcmVsYXRpdmUgdG8gdGhlIHJvb3Qgb2YgdGhlIG1vbm9yZXBvLlxuICAgICAqXG4gICAgICogbm90ZTogbXVzdCBzdGFydCB3aXRoIGxlYWRpbmcgL1xuICAgICAqL1xuICAgIHJlYWRvbmx5IG91dHB1dHM/OiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgVGFyZ2V0IERlcGVuZGVuY2llcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXBlbmRzT24/OiBUYXJnZXREZXBlbmRlbmN5W107XG4gIH1cblxuICAvKipcbiAgICogU3VwcG9ydGVkIGVudW1zIGZvciBhIFRhcmdldERlcGVuZGVuY3kuXG4gICAqL1xuICBleHBvcnQgZW51bSBUYXJnZXREZXBlbmRlbmN5UHJvamVjdCB7XG4gICAgLyoqXG4gICAgICogT25seSByZWx5IG9uIHRoZSBwYWNrYWdlIHdoZXJlIHRoZSB0YXJnZXQgaXMgY2FsbGVkLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c3VhbGx5IGRvbmUgZm9yIHRlc3QgbGlrZSB0YXJnZXRzIHdoZXJlIHlvdSBvbmx5IHdhbnQgdG8gcnVuIHVuaXRcbiAgICAgKiB0ZXN0cyBvbiB0aGUgdGFyZ2V0IHBhY2thZ2VzIHdpdGhvdXQgdGVzdGluZyBhbGwgZGVwZW5kZW50IHBhY2thZ2VzLlxuICAgICAqL1xuICAgIFNFTEYgPSBcInNlbGZcIixcbiAgICAvKipcbiAgICAgKiBUYXJnZXQgcmVsaWVzIG9uIGV4ZWN1dGluZyB0aGUgdGFyZ2V0IGFnYWluc3QgYWxsIGRlcGVuZGVuY2llcyBmaXJzdC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXN1YWxseSBkb25lIGZvciBidWlsZCBsaWtlIHRhcmdldHMgd2hlcmUgeW91IHdhbnQgdG8gYnVpbGQgYWxsXG4gICAgICogZGVwZW5kYW50IHByb2plY3RzIGZpcnN0LlxuICAgICAqL1xuICAgIERFUEVOREVOQ0lFUyA9IFwiZGVwZW5kZW5jaWVzXCIsXG4gIH1cblxuICAvKipcbiAgICogUmVwcmVzZW50cyBhbiBOWCBUYXJnZXQgRGVwZW5kZW5jeS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0RGVwZW5kZW5jeSB7XG4gICAgLyoqXG4gICAgICogUHJvamVuIHRhcmdldCBpLmU6IGJ1aWxkLCB0ZXN0LCBldGNcbiAgICAgKi9cbiAgICByZWFkb25seSB0YXJnZXQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRhcmdldCBkZXBlbmRlbmNpZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvamVjdHM6IFRhcmdldERlcGVuZGVuY3lQcm9qZWN0O1xuICB9XG5cbiAgLyoqXG4gICAqIE5hbWVkIGlucHV0cyBjb25maWdcbiAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvbngtanNvbiNpbnB1dHMtJi1uYW1lZGlucHV0c1xuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBOYW1lZElucHV0cyB7XG4gICAgcmVhZG9ubHkgW25hbWU6IHN0cmluZ106IHN0cmluZ1tdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRhcmdldCBkZWZhdWx0cyBjb25maWdcbiAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvbngtanNvbiN0YXJnZXQtZGVmYXVsdHNcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0RGVmYXVsdHMge1xuICAgIHJlYWRvbmx5IFtuYW1lOiBzdHJpbmddOiBQcm9qZWN0VGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIE5YIHdvcmtzcGFjZSBjb25maWd1cmF0aW9ucy5cbiAgICpcbiAgICogQHNlZSBodHRwczovL254LmRldi9jb25maWd1cmF0aW9uL3BhY2thZ2Vqc29uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFdvcmtzcGFjZUNvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQWZmZWN0ZWQgYnJhbmNoLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgbWFpbmxpbmVcbiAgICAgKi9cbiAgICByZWFkb25seSBhZmZlY3RlZEJyYW5jaD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIFRhcmdldERlcGVuZGVuY2llcy5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvY29uZmlndXJhdGlvbi9wYWNrYWdlanNvbiN0YXJnZXQtZGVwZW5kZW5jaWVzXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFyZ2V0RGVwZW5kZW5jaWVzPzogVGFyZ2V0RGVwZW5kZW5jaWVzO1xuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBwYXR0ZXJucyB0byBpbmNsdWRlIGluIHRoZSAubnhpZ25vcmUgZmlsZS5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvY29uZmlndXJhdGlvbi9wYWNrYWdlanNvbiNueGlnbm9yZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IG54SWdub3JlPzogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIG9ubHkgYWNjZXNzIHRva2VuIGlmIGVuYWJsaW5nIG54IGNsb3VkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG54Q2xvdWRSZWFkT25seUFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgbGlzdCBvZiB0YXJnZXRzL29wZXJhdGlvbnMgdGhhdCBhcmUgY2FjaGVkIGJ5IE54XG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBbXCJidWlsZFwiLCBcInRlc3RcIl1cbiAgICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L3JlZmVyZW5jZS9ueC1qc29uI3Rhc2tzLXJ1bm5lci1vcHRpb25zXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2FjaGVhYmxlT3BlcmF0aW9ucz86IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogTmFtZWQgaW5wdXRzXG4gICAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvbngtanNvbiNpbnB1dHMtJi1uYW1lZGlucHV0c1xuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWVkSW5wdXRzPzogTmFtZWRJbnB1dHM7XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXQgZGVmYXVsdHNcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvcmVmZXJlbmNlL254LWpzb24jdGFyZ2V0LWRlZmF1bHRzXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFyZ2V0RGVmYXVsdHM/OiBUYXJnZXREZWZhdWx0cztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvamVjdENvbmZpZyB7XG4gICAgLyoqXG4gICAgICogTmFtZWQgaW5wdXRzXG4gICAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvbngtanNvbiNpbnB1dHMtJi1uYW1lZGlucHV0c1xuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWVkSW5wdXRzPzogTmFtZWRJbnB1dHM7XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAc2VlIGh0dHBzOi8vbnguZGV2L3JlZmVyZW5jZS9wcm9qZWN0LWNvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICByZWFkb25seSB0YXJnZXRzPzogUHJvamVjdFRhcmdldHM7XG5cbiAgICAvKipcbiAgICAgKiBQcm9qZWN0IHRhZyBhbm5vdGF0aW9uc1xuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvcHJvamVjdC1jb25maWd1cmF0aW9uI3RhZ3NcbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBJbXBsaWNpdCBkZXBlbmRlbmNpZXNcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9ueC5kZXYvcmVmZXJlbmNlL3Byb2plY3QtY29uZmlndXJhdGlvbiNpbXBsaWNpdGRlcGVuZGVuY2llc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGltcGxpY2l0RGVwZW5kZW5jaWVzPzogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBFeHBsaWNpdCBsaXN0IG9mIHNjcmlwdHMgZm9yIE54IHRvIGluY2x1ZGUuXG4gICAgICogQHNlZSBodHRwczovL254LmRldi9yZWZlcmVuY2UvcHJvamVjdC1jb25maWd1cmF0aW9uI2lnbm9yaW5nLXBhY2thZ2UuanNvbi1zY3JpcHRzXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5jbHVkZWRTY3JpcHRzPzogc3RyaW5nW107XG4gIH1cbn1cbiJdfQ==
\ No newline at end of file
diff --git a/scripts/pnpm/link-bundled-transitive-deps.ts b/scripts/pnpm/link-bundled-transitive-deps.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b4ba437c0b5000e9892cf2f15b7ea40c60ebcfe2
--- /dev/null
+++ b/scripts/pnpm/link-bundled-transitive-deps.ts
@@ -0,0 +1,90 @@
+#!/usr/bin/env ts-node
+/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
+SPDX-License-Identifier: Apache-2.0 */
+import * as path from "node:path";
+import * as fs from "fs-extra";
+import * as SemVer from "semver";
+import { buildDependenciesHierarchy, PackageNode } from "@pnpm/reviewing.dependencies-hierarchy";
+
+async function linkBundledTransitiveDeps(workspaceDir: string, pkgFolder: string) {
+  const pkgDir = path.join(workspaceDir, pkgFolder);
+  const pkgJson = require(path.join(pkgDir, "package.json"));
+  const bundledDeps: string[] = pkgJson.bundledDependencies || [];
+  if (!bundledDeps.length) {
+    // No bundled deps
+    return;
+  }
+
+  const dependencyHierarchy = (await buildDependenciesHierarchy([pkgDir], {
+    depth: Number.MAX_SAFE_INTEGER,
+    lockfileDir: workspaceDir,
+    include: {
+      optionalDependencies: false,
+      dependencies: true,
+      devDependencies: false,
+    },
+  }))[pkgDir];
+
+  const transitiveDeps: Record<string, PackageNode> = {};
+
+  function visit(_deps?: PackageNode[]) {
+    if (_deps == null || !_deps.length) {
+      return;
+    }
+
+    _deps.forEach((_dep) => {
+      if (_dep.resolved == null || _dep.isMissing || _dep.version.startsWith("link:")) {
+        // Unresolved / unsaved dependency
+        return;
+      }
+
+      // record the transitive dep with resolved path to symlink
+      const _existing = transitiveDeps[_dep.alias];
+      // Use the latest version of transitive deps only
+      // TODO: Can we support multiple versions of transitive deps, and should we?
+      if (!_existing || SemVer.gt(_dep.version, _existing.version)) {
+        transitiveDeps[_dep.alias] = _dep;
+
+        // traverse
+        visit(_dep.dependencies);
+      }
+    })
+  }
+
+  for (const _bundledDepName of bundledDeps) {
+    const _bundledDep = (dependencyHierarchy.dependencies || []).find((v) => v.alias === _bundledDepName);
+    if (_bundledDep == null) {
+      throw new Error(`Package ${pkgJson.name} bundled dependency "${_bundledDepName}" is missing dependency declaration.`)
+    }
+
+    visit(_bundledDep.dependencies);
+  }
+
+  // create symlink for each transitive dep in package node_modules
+  for (const [name, dep] of Object.entries(transitiveDeps)) {
+    const _dest = path.join(pkgDir, "node_modules", name);
+    if (!(await fs.pathExists(_dest))) {
+      if (!(await fs.pathExists(dep.path))) {
+        console.warn(dep);
+        throw new Error(`Pnpm dependency path not found: ${dep.path}`);
+      }
+
+      await fs.createSymlink(dep.path, _dest, "dir");
+    }
+  }
+
+  console.info(`Package "${pkgFolder}" transitive bundled dependencies are linked:`, Object.keys(transitiveDeps).sort().join(", "));
+}
+
+(async () => {
+  const [,,pkgFolder] = process.argv;
+
+  if (pkgFolder == null) {
+    throw new Error(`Missing pkgDir arg`)
+  }
+
+  linkBundledTransitiveDeps(
+    require("nx/src/utils/workspace-root").workspaceRoot,
+    pkgFolder,
+  )
+})();