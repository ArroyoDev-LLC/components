{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=build --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "clean": {
      "name": "clean",
      "steps": [
        {
          "exec": "pnpm -r --parallel run clean"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "pnpm exec tsx .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate TypeScript API reference docs/",
      "steps": [
        {
          "exec": "pnpm exec typedoc"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=eslint --output-style=stream --nx-bail",
          "receiveArgs": true
        },
        {
          "exec": "eslint",
          "name": "Lint Root",
          "args": [
            "--cache",
            "--no-error-on-unmatched-pattern",
            "--ext=.ts",
            "--fix",
            ".projenrc.ts",
            "projenrc"
          ]
        }
      ]
    },
    "graph": {
      "name": "graph",
      "description": "Generate dependency graph for monorepo",
      "steps": [
        {
          "exec": "pnpm exec nx graph",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        },
        {
          "exec": "pnpm exec nx run-many --target=install:ci --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=package --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=post-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-install": {
      "name": "post-install",
      "description": "Node post-install hook.",
      "steps": [
        {
          "exec": "simple-git-hooks",
          "name": "Setup simple-git-hooks.",
          "condition": "test -z \"$CI\""
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "postinstall": {
      "name": "postinstall",
      "description": "Post install hook.",
      "steps": [
        {
          "exec": "pnpm --no-bail --recursive --parallel --stream --if-present run post-install"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=pre-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "run-many": {
      "name": "run-many",
      "description": "Run task against multiple workspace projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many",
          "receiveArgs": true
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=test --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run tests on changes.",
      "steps": [
        {
          "exec": "vitest",
          "receiveArgs": true
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "pnpm dlx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@aws/pdk,@jsii/spec,@mrgrain/jsii-struct-builder,@sindresorhus/is,@types/fs-extra,@types/prettier,@vitejs/plugin-vue,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,fs-extra,lint-staged,npm-check-updates,nx-cloud,pathe,prettier,rimraf,rollup-plugin-vue,simple-git-hooks,ts-morph,ts-node,tsx,typedoc,unbuild,vite,vitest,aws-cdk-lib,cdk-nag"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @aws/pdk @jsii/spec @mrgrain/jsii-struct-builder @sindresorhus/is @types/fs-extra @types/node @types/prettier @typescript-eslint/eslint-plugin @typescript-eslint/parser @vitejs/plugin-vue constructs eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint fs-extra lint-staged npm-check-updates nx-cloud nx pathe prettier projen rimraf rollup-plugin-vue simple-git-hooks syncpack ts-morph ts-node tsx typedoc typescript unbuild vite vitest @arroyodev-llc/projen.component.dir-env @arroyodev-llc/projen.component.git-hooks @arroyodev-llc/projen.component.linting @arroyodev-llc/projen.component.pnpm-workspace @arroyodev-llc/projen.component.release-please @arroyodev-llc/projen.component.tool-versions @arroyodev-llc/projen.component.typescript-source-file @arroyodev-llc/projen.component.unbuild @arroyodev-llc/projen.component.vite @arroyodev-llc/projen.component.vitest @arroyodev-llc/projen.component.vue @arroyodev-llc/projen.project.nx-monorepo @arroyodev-llc/projen.project.typescript @arroyodev-llc/projen.project.vue-component @arroyodev-llc/utils.projen-builder @arroyodev-llc/utils.projen @aws-cdk/aws-cognito-identitypool-alpha aws-cdk-lib cdk-nag"
        },
        {
          "exec": "pnpm exec projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-deps": {
      "name": "upgrade-deps",
      "description": "Upgrade dependencies in the monorepo",
      "steps": [
        {
          "exec": "pnpm exec npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor"
        },
        {
          "exec": "pnpm exec syncpack fix-mismatches"
        },
        {
          "exec": "rm pnpm-lock.yaml"
        },
        {
          "exec": "pnpm i"
        },
        {
          "exec": "pnpm exec projen"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
          "receiveArgs": true
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"pnpm exec projen\"."
}
